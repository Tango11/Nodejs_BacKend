{"version":3,"sources":["tests\\agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,IAAIG,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADZ,CAAb;AAGA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAEL,KAAK,CAACM,GAAN;AADI,CAAjB;AAGA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AACAX,IAAI,CAACY,UAAL,CAAgB,YAAY;AAC1BD,EAAAA,OAAO,GAAET,KAAK,CAACW,aAAN,EAAT;AACAJ,EAAAA,SAAS,GAAG;AACVK,IAAAA,OAAO,EAAEH,OAAO,CAACH,GAAR;AADC,GAAZ;AAGA,QAAMO,aAAa,GAAGZ,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMM,SADc;AAEtC,uBAAmB,MAAMH;AAFa,GAAR,CAAhC;AAIAI,EAAAA,EAAE,GAAG,MAAMK,aAAa,CAACX,MAAD,CAAxB;AACD,CAVD;AAWAJ,IAAI,CAACgB,SAAL,CAAe,MAAM;AACnBL,EAAAA,OAAO,IAAIT,KAAK,CAACS,OAAN,CAAcM,OAAd,EAAX;AACD,CAFD;AAGAjB,IAAI,CAAC,OAAD,EAAUkB,CAAC,IAAI;AAAA;;AACjBA,EAAAA,CAAC,CAACC,MAAF,uBAAS,WAAAT,EAAE,uBAAF,CAAGU,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,wBAAnB;AACD,CAFG,CAAJ;AAIApB,IAAI,CAACqB,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AAAA;AAAA;;AACxBA,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAb,SAAS,8BAAT,CAAUK,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,kCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAhB,UAAU,8BAAV,CAAWC,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,qCAApC;AACD,CAHD","sourceRoot":"C:\\Users\\tango69\\NodeRedis\\Node-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\ntest.beforeEach(async () => {\r\n  sandbox= sinon.createSandbox()\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n  db = await setupDatabase(config)\r\n})\r\ntest.afterEach(() => {\r\n  sandbox && sinon.sandbox.restore()\r\n})\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agente servicio existe')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fue ejecutada')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo fue ejecutado')\r\n})\r\n"]}